From 946df5b28d3a27127e00e0bea86ca84727fbc37d Mon Sep 17 00:00:00 2001
From: Joannis Orlandos <j.orlandos@jakajima.eu>
Date: Fri, 23 Sep 2016 19:31:44 +0200
Subject: [PATCH] Complete overhaul

---
 PHP/produce_tests.php               | 12 ++---
 Sources/Essentials/Hash.swift       | 30 ++----------
 Sources/Essentials/Helpers.swift    | 24 ++-------
 Sources/HMAC/HMAC.swift             | 16 +++---
 Sources/MD5/MD5.swift               | 80 +++++++++++++++++++++++-------
 Sources/PBKDF2/PBKDF2.swift         | 45 ++++++++++++++---
 Sources/SHA1/SHA1.swift             | 98 ++++++++++++++++++++++++++-----------
 Tests/MD5Tests/MD5Tests.swift       |  5 +-
 Tests/PBKDF2Tests/PBKDF2Tests.swift | 43 +---------------
 Tests/SHA1Tests/SHA1Tests.swift     | 16 ++++--
 10 files changed, 210 insertions(+), 159 deletions(-)

diff --git a/PHP/produce_tests.php b/PHP/produce_tests.php
index 4366e5a..7ed0d80 100644
--- a/PHP/produce_tests.php
+++ b/PHP/produce_tests.php
@@ -1,9 +1,9 @@
 <?php
   $tests = Array();
-  $tests["password"] = "salt";
-  $tests["password2"] = "othersalt";
-  $tests["somewhatlongpasswordstringthatIwanttotest"] = "1";
-  $tests["p"] = "somewhatlongsaltstringthatIwanttotest";
+  //$tests["password"] = "salt";
+  //$tests["password2"] = "othersalt";
+  //$tests["somewhatlongpasswordstringthatIwanttotest"] = "1";
+  //$tests["p"] = "somewhatlongsaltstringthatIwanttotest";
 
   function generateTests($tests, $alg, $iterations) {
     echo "ALG = $alg\n";
@@ -16,6 +16,6 @@
     echo "\n\n";
   }
 
-  generateTests($tests, "md5", 1000);
-  generateTests($tests, "sha1", 1000);
+  //generateTests($tests, "md5", 10000000);
+  generateTests($tests, "sha1", 10000);
 ?>
diff --git a/Sources/Essentials/Hash.swift b/Sources/Essentials/Hash.swift
index 4bd24d5..8a844ae 100644
--- a/Sources/Essentials/Hash.swift
+++ b/Sources/Essentials/Hash.swift
@@ -2,31 +2,11 @@ import Core
 
 public protocol Hash {
     static var blockSize: Int { get }
-
-    init(_ stream: ByteStream)
-    func hash() throws -> ByteStream
+    
+    static func hash(_ bytes: Bytes) throws -> Bytes
 }
 
-extension Hash {
-    public init(_ bytes: Bytes) {
-        let inputStream = BasicByteStream(bytes)
-        self.init(inputStream)
-    }
-
-    public func hash() throws -> Bytes {
-        let outputStream: ByteStream = try self.hash()
-
-        var output: Bytes = []
-        while !outputStream.closed {
-            let next = try outputStream.next(Self.blockSize)
-            output += next
-        }
-
-        return output
-    }
-
-    public static func hash(_ bytes: Bytes) throws -> Bytes {
-        let hasher = Self(bytes)
-        return try hasher.hash()
-    }
+public protocol StreamingHash: Hash {
+    init(_ stream: ByteStream)
+    func hash() throws -> Bytes
 }
diff --git a/Sources/Essentials/Helpers.swift b/Sources/Essentials/Helpers.swift
index b4e8fe2..a95ae8e 100644
--- a/Sources/Essentials/Helpers.swift
+++ b/Sources/Essentials/Helpers.swift
@@ -40,24 +40,10 @@ extension Sequence where Iterator.Element == Byte {
             return s
         #endif
     }
+}
 
-    public func applyPadding(until length: Int) -> Bytes {
-        var bytes = Array(self)
-
-        while bytes.count < length {
-            bytes.append(0x00)
-        }
-
-        return bytes
-    }
-
-    public func applyBitLength(of length: Int, reversed: Bool = true) -> Bytes {
-        var lengthBytes = arrayOfBytes(length * 8, length: 8)
-
-        if reversed {
-            lengthBytes = lengthBytes.reversed()
-        }
-
-        return self + lengthBytes
-    }
+public func bitLength(of length: Int, reversed: Bool = true) -> Bytes {
+    let lengthBytes = arrayOfBytes(length * 8, length: 8)
+    
+    return reversed ? lengthBytes.reversed() : lengthBytes
 }
diff --git a/Sources/HMAC/HMAC.swift b/Sources/HMAC/HMAC.swift
index 43e9b73..8bbf693 100644
--- a/Sources/HMAC/HMAC.swift
+++ b/Sources/HMAC/HMAC.swift
@@ -4,7 +4,7 @@ import Essentials
 /**
     Used to authenticate messages using the `Hash` algorithm
 */
-public class HMAC<Variant: Hash> {
+public class HMAC<Variant: StreamingHash> {
     /**
         Create an HMAC authenticator.
     */
@@ -23,7 +23,7 @@ public class HMAC<Variant: Hash> {
         
         // If it's too long, hash it first
         if key.count > Variant.blockSize {
-            key = try Variant(key).hash()
+            key = try Variant.hash(key)
         }
         
         // Add padding
@@ -35,17 +35,17 @@ public class HMAC<Variant: Hash> {
         var outerPadding = Bytes(repeating: 0x5c, count: Variant.blockSize)
         var innerPadding = Bytes(repeating: 0x36, count: Variant.blockSize)
         
-        for (index, _) in key.enumerated() {
-            outerPadding[index] = key[index] ^ outerPadding[index]
+        for i in 0..<key.count {
+            outerPadding[i] = key[i] ^ outerPadding[i]
         }
         
-        for (index, _) in key.enumerated() {
-            innerPadding[index] = key[index] ^ innerPadding[index]
+        for i in 0..<key.count {
+            innerPadding[i] = key[i] ^ innerPadding[i]
         }
         
         // Hash the information
-        let innerPaddingHash: Bytes = try Variant(innerPadding + message).hash()
-        let outerPaddingHash: Bytes = try Variant(outerPadding + innerPaddingHash).hash()
+        let innerPaddingHash: Bytes = try Variant.hash(innerPadding + message)
+        let outerPaddingHash: Bytes = try Variant.hash(outerPadding + innerPaddingHash)
         
         return outerPaddingHash
     }
diff --git a/Sources/MD5/MD5.swift b/Sources/MD5/MD5.swift
index 3348a30..12d1b3c 100644
--- a/Sources/MD5/MD5.swift
+++ b/Sources/MD5/MD5.swift
@@ -1,10 +1,10 @@
-import Core
 import Essentials
 
-public final class MD5: Hash {
+public final class MD5: StreamingHash {
     public enum Error: Swift.Error {
         case invalidByteCount
         case switchError
+        case noStreamProvided
     }
 
     // MARK - MD5 Specific variables
@@ -30,7 +30,7 @@ public final class MD5: Hash {
     private var c0: UInt32 = 0x98badcfe
     private var d0: UInt32 = 0x10325476
 
-    private let stream: ByteStream
+    private var stream: ByteStream? = nil
     private var digest: [UInt32]
 
     private static let k: [UInt32] = [
@@ -51,14 +51,60 @@ public final class MD5: Hash {
         0x6fa87e4f,0xfe2ce6e0,0xa3014314,0x4e0811a1,
         0xf7537e82,0xbd3af235,0x2ad7d2bb,0xeb86d391
     ]
+    
+    internal init() {
+        digest = []
+    }
+    
+    public var hashedBytes: [UInt8] {
+        var result = [UInt8]()
+        
+        digest.append(a0)
+        digest.append(b0)
+        digest.append(c0)
+        digest.append(d0)
+        
+        digest.forEach { int in
+            result += convert(int)
+        }
+        
+        // return a basic byte stream
+        return result
+    }
 
     // MARK - Hash Protocol
+    
+    public static func hash(_ inputBytes: [UInt8]) throws -> [UInt8] {
+        var bytes = inputBytes + [0x80]
+        var inputBlocks = inputBytes.count / MD5.blockSize
+        
+        if inputBytes.count % MD5.blockSize != 8 {
+            inputBlocks += 1
+            bytes.append(contentsOf: [UInt8](repeating: 0, count: ((inputBlocks * MD5.blockSize) - 8) - bytes.count))
+        }
+        
+        bytes.append(contentsOf: bitLength(of: inputBytes.count, reversed: true))
+        
+        let md5 = MD5()
+        
+        for i in 0..<inputBlocks {
+            let start = i * MD5.blockSize
+            let end = (i+1) * blockSize
+            try md5.process(bytes[start..<end])
+        }
+        
+        return md5.hashedBytes
+    }
 
     /**
         Creates a hashed ByteStream from an input ByteStream
         using the MD5 protocol.
     */
-    public func hash() throws -> ByteStream {
+    public func hash() throws -> [UInt8] {
+        guard let stream = stream else {
+            throw MD5.Error.noStreamProvided
+        }
+        
         var count = 0
         while !stream.closed {
             let slice = try stream.next(MD5.blockSize)
@@ -68,9 +114,9 @@ public final class MD5: Hash {
                 count += bytes.count
                 if bytes.count > MD5.blockSize - 8 {
                     // if the block is slightly too big, just pad and process
-                    bytes = bytes.applyPadding(until: MD5.blockSize)
+                    bytes.append(contentsOf: [UInt8](repeating: 0, count: MD5.blockSize - bytes.count))
 
-                    try process(BytesSlice(bytes))
+                    try process(ArraySlice<UInt8>(bytes))
 
                     // give an empty block for padding
                     bytes = []
@@ -79,9 +125,9 @@ public final class MD5: Hash {
                 // pad and process the last block
                 // adding the bit length
                 bytes.append(0x80)
-                bytes = bytes.applyPadding(until: MD5.blockSize - 8)
-                bytes = bytes.applyBitLength(of: count, reversed: true)
-                try process(BytesSlice(bytes))
+                bytes.append(contentsOf: [UInt8](repeating: 0, count: (MD5.blockSize - 8) - bytes.count))
+                bytes.append(contentsOf: bitLength(of: count, reversed: true))
+                try process(ArraySlice<UInt8>(bytes))
             } else {
                 // if the stream is still open,
                 // process as normal
@@ -92,7 +138,7 @@ public final class MD5: Hash {
 
         // convert the hash into a byte
         // array of results
-        var result: Bytes = []
+        var result = [UInt8]()
 
         digest.append(a0)
         digest.append(b0)
@@ -104,22 +150,22 @@ public final class MD5: Hash {
         }
 
         // return a basic byte stream
-        return BasicByteStream(result)
+        return result
     }
 
     // MARK: Processing
 
-    private func convert(_ int: UInt32) -> Bytes {
+    private func convert(_ int: UInt32) -> [UInt8] {
         let int = int.littleEndian
         return [
-            Byte(int & 0xff),
-            Byte((int >> 8) & 0xff),
-            Byte((int >> 16) & 0xff),
-            Byte((int >> 24) & 0xff)
+            UInt8(int & 0xff),
+            UInt8((int >> 8) & 0xff),
+            UInt8((int >> 16) & 0xff),
+            UInt8((int >> 24) & 0xff)
         ]
     }
 
-    private func process(_ bytes: BytesSlice) throws {
+    private func process(_ bytes: ArraySlice<UInt8>) throws {
         if bytes.count != MD5.blockSize {
             throw Error.invalidByteCount
         }
diff --git a/Sources/PBKDF2/PBKDF2.swift b/Sources/PBKDF2/PBKDF2.swift
index 4579c35..fff0fc7 100644
--- a/Sources/PBKDF2/PBKDF2.swift
+++ b/Sources/PBKDF2/PBKDF2.swift
@@ -15,7 +15,7 @@ public final class PBKDF2<Variant: Hash> {
 
     /// Used to make the block number
     /// Credit to Marcin Krzyzanowski
-    private static func integerBytes(blockNum block: UInt) -> Bytes {
+    private static func integerBytes(blockNum block: UInt32) -> Bytes {
         var bytes = Bytes(repeating: 0, count: 4)
         bytes[0] = Byte((block >> 24) & 0xFF)
         bytes[1] = Byte((block >> 16) & 0xFF)
@@ -26,6 +26,13 @@ public final class PBKDF2<Variant: Hash> {
     
     public static func derive(fromKey key: Bytes, usingSalt salt: Bytes, iterating iterations: Int, keyLength keySize: UInt? = nil) throws -> Bytes {
         
+        func authenticate(innerPadding: [UInt8], outerPadding: [UInt8], message: [UInt8]) throws -> [UInt8] {
+            let innerPaddingHash: Bytes = try Variant.hash(innerPadding + message)
+            let outerPaddingHash: Bytes = try Variant.hash(outerPadding + innerPaddingHash)
+            
+            return outerPaddingHash
+        }
+        
         let keySize = keySize ?? UInt(Variant.blockSize)
         
         guard iterations > 0 else {
@@ -44,18 +51,44 @@ public final class PBKDF2<Variant: Hash> {
             throw PBKDF2Error.keySizeTooBig(keySize)
         }
         
-        let blocks = UInt(ceil(Double(keySize) / Double(Variant.blockSize)))
-        var response = Bytes()
+        // MARK - Precalculate paddings
+        var key = key
+        
+        // If it's too long, hash it first
+        if key.count > Variant.blockSize {
+            key = try Variant.hash(key)
+        }
+        
+        // Add padding
+        if key.count < Variant.blockSize {
+            key = key + Bytes(repeating: 0, count: Variant.blockSize - key.count)
+        }
+        
+        // XOR the information
+        var outerPadding = Bytes(repeating: 0x5c, count: Variant.blockSize)
+        var innerPadding = Bytes(repeating: 0x36, count: Variant.blockSize)
+        
+        for i in 0..<key.count {
+            outerPadding[i] = key[i] ^ outerPadding[i]
+        }
+        
+        for i in 0..<key.count {
+            innerPadding[i] = key[i] ^ innerPadding[i]
+        }
+        
+        // MARK - The hashing process
+        let blocks = UInt32(ceil(Double(keySize) / Double(Variant.blockSize)))
+        var response = [UInt8]()
         
         for block in 1...blocks {
             var s = salt
-            s.append(contentsOf: self.integerBytes(blockNum: block))
+            s.append(contentsOf: integerBytes(blockNum: block))
             
-            var ui = try HMAC<Variant>().authenticate(s, key: key)
+            var ui = try authenticate(innerPadding: innerPadding, outerPadding: outerPadding, message: s)
             var u1 = ui
             
             for _ in 0..<iterations - 1 {
-                u1 = try HMAC<Variant>().authenticate(u1, key: key)
+                u1 = try authenticate(innerPadding: innerPadding, outerPadding: outerPadding, message: u1)
                 ui = xor(ui, u1)
             }
             
diff --git a/Sources/SHA1/SHA1.swift b/Sources/SHA1/SHA1.swift
index 87eb787..cfaf399 100644
--- a/Sources/SHA1/SHA1.swift
+++ b/Sources/SHA1/SHA1.swift
@@ -1,15 +1,27 @@
-import Core
 import Essentials
+import Core
 
-public final class SHA1: Hash {
+public final class SHA1: StreamingHash {
 
     public enum Error: Swift.Error {
         case invalidByteCount
         case switchError
+        case noStreamProvided
     }
 
     private var h: [UInt32]
-    private var stream: ByteStream
+    private var stream: ByteStream? = nil
+    
+    public var hashedBytes: [UInt8] {
+        var bytes = [UInt8]()
+        
+        h.forEach {
+            let item = $0.bigEndian
+            bytes += [UInt8(item & 0xff), UInt8((item >> 8) & 0xff), UInt8((item >> 16) & 0xff), UInt8((item >> 24) & 0xff)]
+        }
+        
+        return bytes
+    }
 
     /**
         Create a new SHA1 capable of hashing a Stream.
@@ -24,6 +36,16 @@ public final class SHA1: Hash {
             0xC3D2E1F0
         ]
     }
+    
+    internal init() {
+        h = [
+            0x67452301,
+            0xEFCDAB89,
+            0x98BADCFE,
+            0x10325476,
+            0xC3D2E1F0
+        ]
+    }
 
     // MARK - Hash Protocol
 
@@ -31,12 +53,38 @@ public final class SHA1: Hash {
         SHA1 uses a block size of 64.
     */
     public static let blockSize = 64
+    
+    public static func hash(_ inputBytes: [UInt8]) throws -> [UInt8] {
+        var bytes = inputBytes + [0x80]
+        var inputBlocks = inputBytes.count / SHA1.blockSize
+        
+        if inputBytes.count % SHA1.blockSize != 8 {
+            inputBlocks += 1
+            bytes.append(contentsOf: [UInt8](repeating: 0, count: ((inputBlocks * SHA1.blockSize) - 8) - bytes.count))
+        }
+        
+        bytes.append(contentsOf: bitLength(of: inputBytes.count, reversed: false))
+        
+        let sha1 = SHA1()
+        
+        for i in 0..<inputBlocks {
+            let start = i * SHA1.blockSize
+            let end = (i+1) * blockSize
+            try sha1.process(bytes[start..<end])
+        }
+        
+        return sha1.hashedBytes
+    }
 
     /**
         Create a hashed ByteStream from an input ByteStream
         using the SHA1 protocol.
     */
-    public func hash() throws -> ByteStream {
+    public func hash() throws -> [UInt8] {
+        guard let stream = stream else {
+            throw SHA1.Error.noStreamProvided
+        }
+        
         var count = 0
         while !stream.closed {
             let slice = try stream.next(SHA1.blockSize)
@@ -45,9 +93,9 @@ public final class SHA1: Hash {
                 var bytes = Array(slice)
                 if bytes.count > SHA1.blockSize - 8 {
                     // if the block is slightly too big, just pad and process
-                    bytes = bytes.applyPadding(until: SHA1.blockSize)
+                    bytes.append(contentsOf: [UInt8](repeating: 0, count: SHA1.blockSize - bytes.count))
 
-                    try process(BytesSlice(bytes))
+                    try process(ArraySlice<UInt8>(bytes))
                     count += bytes.count
 
                     // give an empty block for padding
@@ -60,9 +108,9 @@ public final class SHA1: Hash {
                 // pad and process the last block 
                 // adding the bit length
                 bytes.append(0x80)
-                bytes = bytes.applyPadding(until: SHA1.blockSize - 8)
-                bytes = bytes.applyBitLength(of: count, reversed: false)
-                try process(BytesSlice(bytes))
+                bytes.append(contentsOf: [UInt8](repeating: 0, count: (SHA1.blockSize - 8) - bytes.count))
+                bytes.append(contentsOf: bitLength(of: count, reversed: false))
+                try process(ArraySlice<UInt8>(bytes))
             } else {
                 // if the stream is still open,
                 // process as normal
@@ -71,30 +119,23 @@ public final class SHA1: Hash {
             }
         }
 
-        // convert the hash into a byte
-        // array of results
-        var result: Bytes = []
-        h.forEach { int in
-            result += convert(int)
-        }
-
         // return a basic byte stream
-        return BasicByteStream(result)
+        return hashedBytes
     }
 
     // MARK: Processing
 
-    private func convert(_ int: UInt32) -> Bytes {
+    private func convert(_ int: UInt32) -> [UInt8] {
         let int = int.bigEndian
         return [
-            Byte(int & 0xff),
-            Byte((int >> 8) & 0xff),
-            Byte((int >> 16) & 0xff),
-            Byte((int >> 24) & 0xff)
+            UInt8(int & 0xff),
+            UInt8((int >> 8) & 0xff),
+            UInt8((int >> 16) & 0xff),
+            UInt8((int >> 24) & 0xff)
         ]
     }
 
-    private func process(_ bytes: BytesSlice) throws {
+    private func process(_ bytes: ArraySlice<UInt8>) throws {
         if bytes.count != SHA1.blockSize {
             throw Error.invalidByteCount
         }
@@ -123,24 +164,24 @@ public final class SHA1: Hash {
         var e = h[4]
 
         // Main loop
-        for j in 0..<80 {
+        for j in 0...79 {
             var f: UInt32
             var k: UInt32
 
             switch j {
-            case 0..<20:
+            case 0...19:
                 f = (b & c) | ((~b) & d)
                 k = 0x5A827999
                 break
-            case 20..<40:
+            case 20...39:
                 f = b ^ c ^ d
                 k = 0x6ED9EBA1
                 break
-            case 40..<60:
+            case 40...59:
                 f = (b & c) | (b & d) | (c & d)
                 k = 0x8F1BBCDC
                 break
-            case 60..<80:
+            case 60...79:
                 f = b ^ c ^ d
                 k = 0xCA62C1D6
                 break
@@ -162,5 +203,4 @@ public final class SHA1: Hash {
         h[3] = (h[3] &+ d) & 0xffffffff
         h[4] = (h[4] &+ e) & 0xffffffff
     }
-
 }
diff --git a/Tests/MD5Tests/MD5Tests.swift b/Tests/MD5Tests/MD5Tests.swift
index 4a93929..ffcf887 100644
--- a/Tests/MD5Tests/MD5Tests.swift
+++ b/Tests/MD5Tests/MD5Tests.swift
@@ -28,10 +28,9 @@ class MD5Tests: XCTestCase {
     func testPerformance() {
         let data = Bytes(repeating: Byte.A, count: 10_000_000)
 
-        // ~0.150 release
+        // ~0.121 release
         measure {
-            let hasher = MD5(data)
-            _ = try! hasher.hash()
+            _ = try! MD5.hash(data)
         }
     }
 
diff --git a/Tests/PBKDF2Tests/PBKDF2Tests.swift b/Tests/PBKDF2Tests/PBKDF2Tests.swift
index e5c2dac..dbc9bf2 100644
--- a/Tests/PBKDF2Tests/PBKDF2Tests.swift
+++ b/Tests/PBKDF2Tests/PBKDF2Tests.swift
@@ -1,5 +1,4 @@
 import XCTest
-import Core
 @testable import PBKDF2
 import SHA1
 import MD5
@@ -92,47 +91,9 @@ class PBKDF2Tests: XCTestCase {
     }
     
     func testPerformance() {
-        let data = Bytes(repeating: Byte.A, count: 10_000_000)
-
-        // ~0.250 release
+        // ~0.137 release
         measure {
-            let hasher = SHA1(data)
-            _ = try! hasher.hash()
-        }
-    }
-    
-
-    func testHMAC() throws {
-        let tests: [(key: String, message: String, expected: String)] = [
-            (
-                "vapor",
-                "hello",
-                "bb2a9aabb537902647f3f40bfecb679bf0d7d64b"
-            ),
-            (
-                "true",
-                "2+2=4",
-                "35836a9520eb061ad7e267ac37ab3ee1fafa6e4b"
-            )
-        ]
-        
-        for (i, test) in tests.enumerated() {
-            do {
-                let result = try HMAC<SHA1>().authenticate(
-                    test.message.bytes,
-                    key: test.key.bytes
-                ).hexString.lowercased()
-                XCTAssertEqual(result, test.expected.lowercased())
-            } catch {
-                XCTFail("Test \(i) failed: \(error)")
-            }
+            _ = try! PBKDF2<SHA1>.derive(fromKey: "p".bytes, usingSalt: "somewhatlongsaltstringthatIwanttotest".bytes, iterating: 10_000)
         }
-        
-        // Source: https://github.com/krzyzanowskim/CryptoSwift/blob/swift3-snapshots/CryptoSwiftTests/HMACTests.swift
-        XCTAssertEqual(
-            try HMAC<SHA1>().authenticate([], key: []),
-            [0xfb,0xdb,0x1d,0x1b,0x18,0xaa,0x6c,0x08,0x32,0x4b,0x7d,0x64,0xb7,0x1f,0xb7,0x63,0x70,0x69,0x0e,0x1d]
-        )
     }
-
 }
diff --git a/Tests/SHA1Tests/SHA1Tests.swift b/Tests/SHA1Tests/SHA1Tests.swift
index e536be0..6fb6c96 100644
--- a/Tests/SHA1Tests/SHA1Tests.swift
+++ b/Tests/SHA1Tests/SHA1Tests.swift
@@ -1,7 +1,7 @@
 import XCTest
-import Core
 @testable import SHA1
 import HMAC
+import Essentials
 
 class SHA1Tests: XCTestCase {
     static var allTests = [
@@ -32,23 +32,29 @@ class SHA1Tests: XCTestCase {
             XCTAssertEqual(result, test.expected.lowercased())
         }
         
+        
+        let stream = BasicByteStream([0x31, 0x32, 0x33])
         // Source: https://github.com/krzyzanowskim/CryptoSwift/blob/swift3-snapshots/CryptoSwiftTests/HashTests.swift
         XCTAssertEqual(
-            try SHA1.hash([0x31, 0x32, 0x33]).hexString.lowercased(),
+            try SHA1(stream).hash().hexString.lowercased(),
             "40bd001563085fc35165329ea1ff5c5ecbdbbeef"
         )
     }
     
     func testPerformance() {
-        let data = Bytes(repeating: Byte.A, count: 10_000_000)
+        let data = [UInt8](repeating: 0x61, count: 10_000_000)
 
         // ~0.250 release
         measure {
-            let hasher = SHA1(data)
-            _ = try! hasher.hash()
+            _ = try! SHA1.hash(data)
         }
     }
     
+    func testPerformance2() {
+        measure {
+            _ = try! SHA1.hash("kaas".bytes)
+        }
+    }
 
     func testHMAC() throws {
         let tests: [(key: String, message: String, expected: String)] = [
-- 
2.8.1

